package events;
option java_package = "org.cloudfoundry.dropsonde.events";
option java_outer_classname = "EventFactory";

/// Envelope wraps an Event and adds metadata.
message Envelope {
    /// Type of the wrapped event.
    enum EventType {
        // Removed Heartbeat at position 1
        // Removed HttpStart at position 2
        // Removed HttpStop at position 3
        HttpStartStop = 4;
        LogMessage = 5;
        ValueMetric = 6;
        CounterEvent = 7;
        Error = 8;
        ContainerMetric = 9;
    }

    required string origin = 1;               /// Unique description of the origin of this event.
    required EventType eventType = 2;         /// Type of wrapped event. Only the optional field corresponding to the value of eventType should be set.

    optional int64 timestamp = 6;             /// UNIX timestamp (in nanoseconds) event was wrapped in this Envelope.

    optional string deployment = 13;          /// Deployment name (used to uniquely identify source).
    optional string job = 14;                 /// Job name (used to uniquely identify source).
    optional string index = 15;               /// Index of job (used to uniquely identify source).
    optional string ip = 16;                  /// IP address (used to uniquely identify source).

    map<string, string> tags = 17;            /// key/value tags to include additional identifying information.

    // Removed Heartbeat at position 3
    // Removed HttpStart at position 4
    // Removed HttpStop at position 5
    optional HttpStartStop httpStartStop = 7;
    optional LogMessage logMessage = 8;
    optional ValueMetric valueMetric = 9;
    optional CounterEvent counterEvent = 10;
    optional Error error = 11;
    optional ContainerMetric containerMetric = 12;
}

/// An Error event represents an error in the originating process.
message Error {
    required string source = 1;  /// Source of the error. This may or may not be the same as the Origin in the envelope.
    required int32 code = 2;     /// Numeric error code. This is provided for programmatic responses to the error.
    required string message = 3; /// Error description (preferably human-readable).
}

/// Type of peer handling request.
enum PeerType {
    Client = 1; /// Request is made by this process.
    Server = 2; /// Request is received by this process.
}

/// HTTP method.
enum Method {
    GET = 1;
    POST = 2;
    PUT = 3;
    DELETE = 4;
    HEAD = 5;

    ACL = 6;
    BASELINE_CONTROL = 7;
    BIND = 8;
    CHECKIN = 9;
    CHECKOUT = 10;
    CONNECT = 11;
    COPY = 12;
    DEBUG = 13;
    LABEL = 14;
    LINK = 15;
    LOCK = 16;
    MERGE = 17;
    MKACTIVITY = 18;
    MKCALENDAR = 19;
    MKCOL = 20;
    MKREDIRECTREF = 21;
    MKWORKSPACE = 22;
    MOVE = 23;
    OPTIONS = 24;
    ORDERPATCH = 25;
    PATCH = 26;
    PRI = 27;
    PROPFIND = 28;
    PROPPATCH = 29;
    REBIND = 30;
    REPORT = 31;
    SEARCH = 32;
    SHOWMETHOD = 33;
    SPACEJUMP = 34;
    TEXTSEARCH = 35;
    TRACE = 36;
    TRACK = 37;
    UNBIND = 38;
    UNCHECKOUT = 39;
    UNLINK = 40;
    UNLOCK = 41;
    UPDATE = 42;
    UPDATEREDIRECTREF = 43;
    VERSION_CONTROL = 44;
}

/// An HttpStartStop event represents the whole lifecycle of an HTTP request.
message HttpStartStop {
    required int64 startTimestamp = 1;  /// UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
    required int64 stopTimestamp = 2;   /// UNIX timestamp (in nanoseconds) when the request was received.

    required UUID requestId = 3;        /// ID for tracking lifecycle of request.
    required PeerType peerType = 4;     /// Role of the emitting process in the request cycle.
    required Method method = 5;         /// Method of the request.
    required string uri = 6;            /// Destination of the request.
    required string remoteAddress = 7;  /// Remote address of the request. (For a server, this should be the origin of the request.)
    required string userAgent = 8;      /// Contents of the UserAgent header on the request.

    required int32 statusCode = 9;      /// Status code returned with the response to the request.
    required int64 contentLength = 10;  /// Length of response (bytes).

    /// 11 used to be ParentRequestID which has been deprecated.

    optional UUID applicationId = 12;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
    optional int32 instanceIndex = 13;  /// Index of the application instance.
    optional string instanceId = 14;    /// ID of the application instance.
    repeated string forwarded = 15;     /// This contains http forwarded-for [x-forwarded-for] header from the request.
}

/// A LogMessage contains a "log line" and associated metadata.
message LogMessage {

    /// MessageType stores the destination of the message (corresponding to STDOUT or STDERR).
    enum MessageType {
        OUT = 1;
        ERR = 2;
    }

    required bytes message = 1;            /// Bytes of the log message. (Note that it is not required to be a single line.)
    required MessageType message_type = 2; /// Type of the message (OUT or ERR).
    required int64 timestamp = 3;          /// UNIX timestamp (in nanoseconds) when the log was written.
    optional string app_id = 4;            /// Application that emitted the message (or to which the application is related).
    optional string source_type = 5;       /// Source of the message. For Cloud Foundry, this can be "APP", "RTR", "DEA", "STG", etc.
    optional string source_instance = 6;   /// Instance that emitted the message.
}

/// A ValueMetric indicates the value of a metric at an instant in time.
message ValueMetric {
    required string name = 1;  /// Name of the metric. Must be consistent for downstream consumers to associate events semantically.
    required double value = 2; /// Value at the time of event emission.
    required string unit = 3;  /// Unit of the metric. Please see http://metrics20.org/spec/#units for ideas; SI units/prefixes are recommended where applicable. Should be consistent for the life of the metric (consumers are expected to report, but not interpret, prefixes).
}

/// A CounterEvent represents the increment of a counter. It contains only the change in the value; it is the responsibility of downstream consumers to maintain the value of the counter.
message CounterEvent {
    required string name = 1;  /// Name of the counter. Must be consistent for downstream consumers to associate events semantically.
    required uint64 delta = 2; /// Amount by which to increment the counter.
    optional uint64 total = 3; /// Total value of the counter. This will be overridden by Metron, which internally tracks the total of each named Counter it receives.
}

/// A ContainerMetric records resource usage of an app in a container.
 message ContainerMetric {
    required string applicationId = 1; /// ID of the contained application.
    required int32 instanceIndex = 2;  /// Instance index of the contained application. (This, with applicationId, should uniquely identify a container.)

    required double cpuPercentage = 3;    /// CPU used, on a scale of 0 to 100.
    required uint64 memoryBytes = 4;      /// Bytes of memory used.
    required uint64 diskBytes = 5;        /// Bytes of disk used.
    optional uint64 memoryBytesQuota = 6; /// Maximum bytes of memory allocated to container.
    optional uint64 diskBytesQuota = 7;   /// Maximum bytes of disk allocated to container.
 }

/// Type representing a 128-bit UUID.
//
// The bytes of the UUID should be packed in little-endian **byte** (not bit) order. For example, the UUID `f47ac10b-58cc-4372-a567-0e02b2c3d479` should be encoded as `UUID{ low: 0x7243cc580bc17af4, high: 0x79d4c3b2020e67a5 }`
message UUID {
    required uint64 low = 1;
    required uint64 high = 2;
}